CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(magicbox)

#git stamp
SET(MAGIC_GIT_BRANCH "unknown")
SET(MAGIC_GIT_COMMIT_ID "unknown")
SET(MAGIC_GIT_COMMIT_DATE "unknown")
FIND_PACKAGE(Git)
if(GIT_FOUND)
  EXECUTE_PROCESS(COMMAND git rev-parse --abbrev-ref HEAD OUTPUT_VARIABLE OUTPUT)
  STRING(STRIP ${OUTPUT} OUTPUT)
  SET(MAGIC_GIT_BRANCH ${OUTPUT})
  
  EXECUTE_PROCESS(COMMAND git rev-parse HEAD OUTPUT_VARIABLE OUTPUT)
  STRING(STRIP ${OUTPUT} OUTPUT)
  SET(MAGIC_GIT_COMMIT_ID ${OUTPUT})

  EXECUTE_PROCESS(COMMAND git log -1 --format=%cd COMMAND cat OUTPUT_VARIABLE OUTPUT)
  STRING(STRIP ${OUTPUT} OUTPUT)
  SET(MAGIC_GIT_COMMIT_DATE ${OUTPUT})
else()
  MESSAGE(STATUS "Not found git")
endif()
MESSAGE(STATUS "MAGIC branch: ${MAGIC_GIT_BRANCH}")
MESSAGE(STATUS "MAGIC commite id: ${MAGIC_GIT_COMMIT_ID}")
MESSAGE(STATUS "MAGIC commite date: ${MAGIC_GIT_COMMIT_DATE}")
ADD_DEFINITIONS("-DMAGIC_TAG_branch=\"${MAGIC_GIT_BRANCH}\"")
ADD_DEFINITIONS("-DMAGIC_TAG_commit_id=\"${MAGIC_GIT_COMMIT_ID}\"")
ADD_DEFINITIONS("-DMAGIC_TAG_commit_date=\"${MAGIC_GIT_COMMIT_DATE}\"")

# compiler related
SET(CMAKE_C_COMPILER "gcc")
SET(CMAKE_CXX_COMPILER "g++")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}  -g -ggdb -Wall -Wextra -std=c++11")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wall -Wextra -std=c++11")

#path related
SET(INC_PATH ${CMAKE_SOURCE_DIR}/include)
SET(SRC_PATH ${CMAKE_SOURCE_DIR}/src)
SET(UTIL_PATH ${CMAKE_SOURCE_DIR}/utils)
SET(TEST_PATH ${CMAKE_SOURCE_DIR}/tests)


# include directories, headers and libs
SET(LIB_PATH ${CMAKE_SOURCE_DIR}/lib)
SET(DEMO_PATH ${CMAKE_SOURCE_DIR}/build)
INCLUDE_DIRECTORIES(${UTIL_PATH})
INCLUDE_DIRECTORIES(${INC_PATH})
LINK_DIRECTORIES(${LIB_PATH})
INCLUDE_DIRECTORIES("/usr/local/include")
LINK_DIRECTORIES("/usr/local/lib")

# mesages to display
MESSAGE(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "PROJECT_NAME: ${PROJECT_NAME}")
MESSAGE(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
MESSAGE(STATUS "CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
MESSAGE(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")

# build all targets
ADD_SUBDIRECTORY(${SRC_PATH})
ADD_SUBDIRECTORY(${TEST_PATH})
